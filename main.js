!function(){"use strict";var e="";const t={formSelector:".modal__form",inputSelector:".modal__input",submitButtonSelector:".modal__submit-btn",inactiveButtonClass:"modal__submit-btn-disabled",inputErrorClass:"modal__input_type-error",errorClass:"modal__error_visible"},r=(e,r)=>{const o=r.id+"-error";e.querySelector("#"+o).textContent="",r.classList.remove(t.inputErrorClass)},o=(e,t)=>{e.disabled=!0,e.classList.add(t.inactiveButtonClass)},n=(e,r)=>{var n,a;(e=>e.some((e=>!e.validity.valid)))(e)?o(r,t):(a=t,(n=r).disabled=!1,n.classList.remove(a.inactiveButtonClass))};function a(e,t){let r=arguments.length>2&&void 0!==arguments[2]?arguments[2]:"Saving...",o=arguments.length>3&&void 0!==arguments[3]?arguments[3]:"Save";e.textContent=t?r:o}var s=e+"d3610e9c6dce3cb370d8.svg",c=e+"04c411e519a1c6561568.jpg",i=e+"1ecf96fab54a91c898b4.svg",l=e+"40608da7369d39bc1077.svg",d=e+"d73f076c46eb5467f5fc.svg";const u=document.querySelector("#edit-profile-btn"),m=document.querySelector("#edit-profile-modal"),f=m.querySelector("#edit-profile-close-btn"),_=m.querySelector(".modal__form"),v=document.querySelector("#add-card-modal"),h=document.querySelector(".profile__new-post"),p=v.querySelector("#add-card-close-btn"),y=v.querySelector(".modal__form"),b=v.querySelector(".modal__submit-btn"),S=v.querySelector("#add-card-name-input"),E=v.querySelector("#add-card-link-input"),g=document.querySelector(".profile__name"),k=document.querySelector(".profile__description"),q=m.querySelector("#profile-name-input"),L=m.querySelector("#profile-description-input"),C=document.querySelector("#avatar-modal"),P=document.querySelector(".profile__avatar-btn"),j=C.querySelector("#edit-profile-close-btn"),$=C.querySelector("#edit-avatar-form"),I=C.querySelector("#profile-avatar-input"),U=m.querySelector(".modal__form"),x=document.querySelector("#card-template"),A=document.querySelector(".cards__list"),B=document.querySelector("#preview-modal"),D=B.querySelector("#prview-close-btn"),T=B.querySelector(".modal__image"),w=B.querySelector(".modal__caption"),N=document.querySelector("#delete-modal"),O=N.querySelector("#delete-cancel-btn"),J=N.querySelector(".modal__form");let H,z;document.getElementById("headerLogo").src=s;const M=document.getElementById("profileAvatar");M.src=c,document.getElementById("profilePencil").src=i,document.getElementById("profilePlusSign").src=l,document.getElementById("hoverEditPencil").src=d;const F=new class{constructor(e){let{baseUrl:t,headers:r}=e;this._baseUrl=t,this._headers=r}getAppInfo(){return Promise.all([this.getInitialCards(),this.getUserInfo()])}getInitialCards(){return fetch(`${this._baseUrl}/cards`,{headers:this._headers}).then((e=>{if(e.ok)return e.json();Promise.reject(`Error: ${e.status}`)}))}getUserInfo(){return fetch(`${this._baseUrl}/users/me`,{headers:this._headers}).then((e=>{if(e.ok)return e.json();Promise.reject(`Error: ${e.status}`)}))}editUserInfo(e){let{name:t,about:r}=e;return fetch(`${this._baseUrl}/users/me`,{method:"PATCH",headers:this._headers,body:JSON.stringify({name:t,about:r})}).then((e=>{if(e.ok)return e.json();Promise.reject(`Error: ${e.status}`)}))}editAvatarInfo(e){return fetch(`${this._baseUrl}/users/me/avatar`,{method:"PATCH",headers:this._headers,body:JSON.stringify({avatar:e})}).then((e=>{if(e.ok)return e.json();Promise.reject(`Error: ${e.status}`)}))}removeCard(e){return fetch(`${this._baseUrl}/cards/${e}`,{method:"DELETE",headers:this._headers}).then((e=>{if(e.ok)return e.json();Promise.reject(`Error: ${e.status}`)}))}addCard(e){let{name:t,link:r}=e;return fetch(`${this._baseUrl}/cards/`,{method:"POST",headers:this._headers,body:JSON.stringify({name:t,link:r})}).then((e=>{if(e.ok)return e.json();Promise.reject(`Error: ${e.status}`)}))}toggleLike(e,t){return fetch(`${this._baseUrl}/cards/${e}/likes`,{method:t?"DELETE":"PUT",headers:this._headers}).then((e=>{if(e.ok)return e.json();Promise.reject(`Error: ${e.status}`)}))}}({baseUrl:"https://around-api.en.tripleten-services.com/v1",headers:{authorization:"9e68d7b8-65ac-4026-8ffb-a48d38eaf0d6","Content-Type":"application/json"}});function G(e){e.classList.add("modal_opened"),e.addEventListener("click",R),document.addEventListener("keydown",Q)}function K(e){e.classList.remove("modal_opened"),e.removeEventListener("click",R),document.removeEventListener("keydown",Q)}function Q(e){if("Escape"===e.key){const e=document.querySelector(".modal_opened");e&&K(e)}}function R(e){e.target.classList.contains("modal_opened")&&K(e.target)}function V(e){const t=x.content.querySelector(".card").cloneNode(!0),r=t.querySelector(".card__title"),o=t.querySelector(".card__image"),n=t.querySelector(".card__like-btn"),a=t.querySelector(".card__delete-btn");return r.textContent=e.name,o.alt=e.name,o.src=e.link,e.isLiked&&n.classList.add("card__like-btn_liked"),n.addEventListener("click",(()=>{n.classList.contains("card__like-btn_liked")?F.toggleLike(e._id,!0).then(n.classList.toggle("card__like-btn_liked")):(F.toggleLike(e._id,!1).then(n.classList.toggle("card__like-btn_liked")),console.log(e._id))})),a.addEventListener("click",(()=>function(e,t){H=e,z=t,G(N)}(t,e._id))),o.addEventListener("click",(t=>{t.stopPropagation(),G(B),T.alt=e.name,T.src=e.link,w.textContent=e.name})),t}var W;F.getAppInfo().then((e=>{let[t,r]=e;t.forEach((e=>{const t=V(e);A.prepend(t)})),g.textContent=r.name,k.textContent=r.about,M.src=r.avatar})).catch(console.error),J.addEventListener("submit",(function(e){const t=e.submitter;a(t,!0),e.preventDefault(),F.removeCard(z).then((()=>{H.remove(),K(N)})).catch(console.error).finally((()=>{a(t,!1,"Deleting...","Delete")}))})),u.addEventListener("click",(()=>{var e;q.value=g.textContent,L.value=k.textContent,e=_,[q,L].forEach((t=>{r(e,t)})),G(m)})),f.addEventListener("click",(()=>{K(m)})),U.addEventListener("submit",(function(e){const t=e.submitter;a(t,!0),e.preventDefault(),F.editUserInfo({name:q.value,about:L.value}).then((e=>{g.textContent=e.name,k.textContent=e.about,K(m)})).catch(console.error).finally((()=>{a(t,!1)}))})),y.addEventListener("submit",(function(e){const r=e.submitter;a(r,!0),e.preventDefault(),F.addCard({name:S.value,link:E.value}).then((e=>{!function(e){const t=V(e);A.prepend(t)}(e),o(b,t),K(v)})).catch(console.error).finally((()=>{a(r,!1)}))})),$.addEventListener("submit",(function(e){const t=e.submitter;a(t,!0),e.preventDefault(),F.editAvatarInfo(I.value).then((e=>{e.avatar&&(M.src=e.avatar,console.log(e.avatar),M.alt="updated avatar"),K(C)})).catch(console.error).finally((()=>{a(t,!1)}))})),h.addEventListener("click",(e=>{e.stopPropagation(),G(v)})),p.addEventListener("click",(()=>{K(v)})),O.addEventListener("click",(()=>{K(N)})),P.addEventListener("click",(()=>{G(C)})),j.addEventListener("click",(()=>{K(C)})),D.addEventListener("click",(()=>{K(B)})),W=t,document.querySelectorAll(W.formSelector).forEach((e=>{((e,o)=>{const a=Array.from(e.querySelectorAll(o.inputSelector)),s=e.querySelector(o.submitButtonSelector);n(a,s),a.forEach((o=>{o.addEventListener("input",(function(){((e,o)=>{o.validity.valid?r(e,o):((e,r,o)=>{const n=r.id+"-error";e.querySelector("#"+n).textContent=o,r.classList.add(t.inputErrorClass)})(e,o,o.validationMessage)})(e,o),n(a,s)}))}))})(e,W)}))}();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,